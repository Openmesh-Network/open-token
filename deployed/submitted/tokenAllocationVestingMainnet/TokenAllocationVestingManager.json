{
  "type": "deployment",
  "id": "TokenAllocationVestingManager",
  "batch": "tokenAllocationVestingMainnet",
  "batchIndex": 0,
  "deploymentAddress": "0x063E8857cF0b9D2D1d96bd9D2250367cAa68F519",
  "constructorArgs": [
    "0xc7b10907033Ca6e2FC00FCbb8CDD5cD89f141384",
    "0x24496D746Fd003397790E41d0d1Ce61F4F7fd61f"
  ],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x0000000000000000000000000000000000546f6b656e416c6c6f636174696f6e60c03461013c57611556906001600160401b03601f38849003908101601f191683019082821184831017610111578084916040968794855283398101031261013c5781516001600160a01b0392838216820361013c576020015183811680910361013c578015610125575f80546001600160a01b031981168317825586519516907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3608052610bfc908282019081118382101761011157829161095a833903905ff080156101075760a05251610819908161014182396080518181816096015281816101e6015261055f015260a05181818161044c0152818161049a015261075b0152f35b50513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b8451631e4fbdf760e01b81525f6004820152602490fd5b5f80fdfe60406080815260049081361015610014575f80fd5b5f915f3560e01c9081635b4441b81461047b5781635c60da1b14610438578163715018a6146103e15781638da5cb5b146103ba5781639ea7ccaf146102e6578163aaee754014610193578163e8df5e9414610163578163f2fde38b146100c9575063fc0c546a14610083575f80fd5b346100c557816003193601126100c557517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b9190503461015f57602036600319011261015f576001600160a01b0382358181169391929084900361015b576100fd6107b8565b83156101455750505f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b51631e4fbdf760e01b8152908101849052602490fd5b5f80fd5b8280fd5b5050346100c55760209061018261017936610608565b93929092610717565b90516001600160a01b039091168152f35b91905082346102e3576101bf926101a936610608565b6001600160a01b03988995909491939190610717565b16835194637de676d760e11b86526020868481855afa9586156102a15784966102af575b507f000000000000000000000000000000000000000000000000000000000000000016803b156102ab5783809160448751809481936340c10f1960e01b835287898401528b60248401525af180156102a15790849161028d575b5050803b1561015f5782918451809481936386d1a69f60e01b83525af180156102835761026f575b6020838351908152f35b61027984916106cd565b61015f5782610265565b82513d86823e3d90fd5b610296906106cd565b61015f57825f61023d565b85513d86823e3d90fd5b8380fd5b9095506020813d6020116102db575b816102cb602093836106f5565b810103126102ab5751945f6101e3565b3d91506102be565b80fd5b9190503461015b5760c036600319011261015b578135916001600160801b038316830361015b5760243567ffffffffffffffff93848216820361015b5760443591858316830361015b576001600160a01b039260643590848216820361015b5760843592888416840361015b5760a43598891680990361015b576103719461036c6107b8565b610717565b1692833b1561015b5760245f92838551968794859363c2c2874560e01b85528401525af19081156103b157506103a5575080f35b6103af91506106cd565b005b513d5f823e3d90fd5b823461015b575f36600319011261015b575f5490516001600160a01b039091168152602090f35b3461015b575f36600319011261015b576103f96107b8565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b823461015b575f36600319011261015b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b823461015b5761048a36610608565b9192906104989594956107b8565b7f0000000000000000000000000000000000000000000000000000000000000000916e5af43d82803e903d91602b57fd5bf38787516104f1816104e389888c8960208601988961066f565b03601f1981018352826106f5565b51902093763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c16175f526effffffffffffffffffffffffffffff199060781b161760205260018060a01b038093603760095ff5169687156105f857873b1561015b578651630a07159b60e01b81527f00000000000000000000000000000000000000000000000000000000000000008516998101999099526001600160801b0316602489015267ffffffffffffffff908116604489015293841660648801521660848601521660a48401523060c48401525f8360e48183865af19283156105ee576020936105df575b5051908152f35b6105e8906106cd565b836105d8565b50513d5f823e3d90fd5b86516330be1a3d60e21b81528990fd5b60a090600319011261015b576004356001600160801b038116810361015b579067ffffffffffffffff90602435828116810361015b5791604435818116810361015b57916064356001600160a01b038116810361015b5791608435908116810361015b5790565b939091603c95926001600160801b03199060801b16855267ffffffffffffffff60c01b9384809260c01b16601087015260c01b1660188501526bffffffffffffffffffffffff199060601b16602084015260c01b1660348201520190565b67ffffffffffffffff81116106e157604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff8211176106e157604052565b9190610737906104e360559660439660405195869460208601988961066f565b5190206040513060388201526f5af43d82803e903d91602b57fd5bf3ff60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166014820152733d602d80600a3d3981f3363d3d373d3d3d363d73815260588101919091526037600c8201206078820152012090565b5f546001600160a01b031633036107cb57565b60405163118cdaa760e01b8152336004820152602490fdfea2646970667358221220b258723f5e243578635afbc5865e15c3d4c01fa4aa0ed9227873aea84d4e925b64736f6c63430008170033608080604052346100b8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100a957506001600160401b036002600160401b031982821601610064575b604051610b3f90816100bd8239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f8080610055565b63f92ee8a960e01b8152600490fd5b5f80fdfe6080604090808252600480361015610015575f80fd5b5f3560e01c91826307da68f5146108f2575081630a07159b146105da5781630fb5a6b4146105ad57816313d033c01461056657816338af3eed1461051f578163481c6a75146104d857816386d1a69f146102ea57816396132521146102ad578163aa8c217c1461027a578163be9a655514610243578163c2c287451461014857508063fbccedae146100f95763fc0c546a146100af575f80fd5b346100f5575f3660031901126100f5577fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c79005490516001600160a01b039091168152602090f35b5f80fd5b50346100f5575f3660031901126100f55760209061014161011942610956565b7f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec005490610935565b9051908152f35b82346100f55760203660031901126100f55781359167ffffffffffffffff8084168094036100f5577f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e100546001600160a01b031633819003610226575042841061020a57837f41e45df802422c3eeecf6ae58b76396f24dda0ed25fbf71ab2c39bc26f3c5f7e60208551838152a17f7aa8836cb72a61dd01316d20aba571501a9d434d037b3add1c8ecb2960effd00805467ffffffffffffffff19169091179055005b83604493519263174bff9d60e31b845283015242166024820152fd5b9050604492519163255cd65360e21b835233908301526024820152fd5b82346100f5575f3660031901126100f55760209067ffffffffffffffff5f80516020610aea8339815191525460801c169051908152f35b82346100f5575f3660031901126100f5576020906001600160801b035f80516020610aea83398151915254169051908152f35b82346100f5575f3660031901126100f5576020907f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec00549051908152f35b9050346100f5575f3660031901126100f5577fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a9400546001600160a01b039081169061033342610956565b907f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec009161036283548092610935565b928382018092116104c55755827fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b60208751858152a27fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c7900541691845191602083019163a9059cbb60e01b83526024840152604483015260448252608082019167ffffffffffffffff9281811084821117610492578652515f9182919082865af13d156104b8573d8281116104a557855192601f8201601f19908116603f0116840190811184821017610492578652825261044591903d5f602084013e5b83610a86565b805190811515918261046e575b505061045a57005b6024925191635274afe760e01b8352820152fd5b81925090602091810103126100f557602001518015908115036100f5575f80610452565b604186634e487b7160e01b5f525260245ffd5b604185634e487b7160e01b5f525260245ffd5b610445915060609061043f565b601186634e487b7160e01b5f525260245ffd5b82346100f5575f3660031901126100f5577f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e1005490516001600160a01b039091168152602090f35b82346100f5575f3660031901126100f5577fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a94005490516001600160a01b039091168152602090f35b82346100f5575f3660031901126100f55760209067ffffffffffffffff7f31693d6d00188b327cd3ca4c0c119ed87e5ce23375744e9439ca34bd559d780054169051908152f35b82346100f5575f3660031901126100f5576020905f80516020610aea8339815191525460c01c9051908152f35b9050346100f55760e03660031901126100f5576001600160a01b0391813583811691908290036100f557602435906001600160801b0382168092036100f5576044359167ffffffffffffffff93848416938481036100f55760643592868416938481036100f557608435968a88168098036100f55760a435958987168097036100f55760c4359b8c16809c036100f5577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009a8b549060ff828b1c16159b8216801590816108ea575b60011490816108e0575b1590816108d7575b506108c9575067ffffffffffffffff198082166001178d559796959493927f73678a14c3de3e948002c966d4aca2b47dc0358d2698ba6ae928a8226aaec456926060928e908e6108a9575b50508a51918c7f465352f68a5996d18254495c95de73131df72e79b01175425098b441ae34d2725f80a27fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a940080546001600160a01b0319908116909e17905586835260208301528a820152a167ffffffffffffffff60c01b9060c01b169167ffffffffffffffff60801b9060801b1617175f80516020610aea833981519152557fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c790090858254161790557f7dbb46702084c0aa680ad974c81904a4a2f56082b2a5ee9fff402bb61c1f8ed560208451838152a17f31693d6d00188b327cd3ca4c0c119ed87e5ce23375744e9439ca34bd559d7800918254161790555193807f8fb535e68a1d9e939f56e832df97d6e8949dc31fe7403ecc0a883d5263297c2e5f80a27f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e1009182541617905561086d57005b805468ff000000000000000019169055600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b68ffffffffffffffffff1916680100000000000000011790558d5f6106ff565b895163f92ee8a960e01b8152fd5b9050155f6106b4565b303b1591506106ac565b8d91506106a2565b346100f5575f3660031901126100f55760209067ffffffffffffffff7f7aa8836cb72a61dd01316d20aba571501a9d434d037b3add1c8ecb2960effd0054168152f35b9190820391821161094257565b634e487b7160e01b5f52601160045260245ffd5b67ffffffffffffffff7f7aa8836cb72a61dd01316d20aba571501a9d434d037b3add1c8ecb2960effd00541690811515806109a8575b1561099e575061099b906109b1565b90565b61099b91506109b1565b5080821061098c565b7f31693d6d00188b327cd3ca4c0c119ed87e5ce23375744e9439ca34bd559d78005467ffffffffffffffff168110156109e957505f90565b61099b905f80516020610aea8339815191525467ffffffffffffffff91828260801c168082105f14610a1d57505050505f90565b8260c01c9384820181811161094257168210610a435750506001600160801b0391501690565b6001600160801b03610a5792931692610935565b90818102918183041490151715610942578115610a72570490565b634e487b7160e01b5f52601260045260245ffd5b90610aad5750805115610a9b57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610ae0575b610abe575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610ab656fe7424e9331a1a664cd2534451a453e8af8c82aa8e57e61f926d03aeb673afb400a264697066735822122074cab29324e646671e89228b8fff672a81db5ff0e221fbc9938a3e8d386e17b364736f6c63430008170033000000000000000000000000c7b10907033ca6e2fc00fcbb8cdd5cd89f14138400000000000000000000000024496d746fd003397790e41d0d1ce61f4f7fd61f",
  "gas": "1228900",
  "from": "0x519ce4C129a981B2CBB4C3990B1391dA24E8EbF3",
  "transactionSettings": {
    "chainId": 1,
    "nonce": "60",
    "baseFee": "14687460783",
    "priorityFee": "1000000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000TokenAllocation",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "_token",
            "type": "address",
            "internalType": "contract IERC20Mintable"
          },
          { "name": "_admin", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "createVesting",
        "inputs": [
          { "name": "_amount", "type": "uint128", "internalType": "uint128" },
          { "name": "_start", "type": "uint64", "internalType": "uint64" },
          { "name": "_duration", "type": "uint64", "internalType": "uint64" },
          {
            "name": "_beneficiary",
            "type": "address",
            "internalType": "address"
          },
          { "name": "_cliff", "type": "uint64", "internalType": "uint64" }
        ],
        "outputs": [
          { "name": "vesting", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "getAddress",
        "inputs": [
          { "name": "_amount", "type": "uint128", "internalType": "uint128" },
          { "name": "_start", "type": "uint64", "internalType": "uint64" },
          { "name": "_duration", "type": "uint64", "internalType": "uint64" },
          {
            "name": "_beneficiary",
            "type": "address",
            "internalType": "address"
          },
          { "name": "_cliff", "type": "uint64", "internalType": "uint64" }
        ],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "implementation",
        "inputs": [],
        "outputs": [
          {
            "name": "",
            "type": "address",
            "internalType": "contract SingleBeneficiaryLinearCliffERC20TransferVestingStoppableProxy"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "owner",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "release",
        "inputs": [
          { "name": "_amount", "type": "uint128", "internalType": "uint128" },
          { "name": "_start", "type": "uint64", "internalType": "uint64" },
          { "name": "_duration", "type": "uint64", "internalType": "uint64" },
          {
            "name": "_beneficiary",
            "type": "address",
            "internalType": "address"
          },
          { "name": "_cliff", "type": "uint64", "internalType": "uint64" }
        ],
        "outputs": [
          { "name": "released", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "renounceOwnership",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "stopAt",
        "inputs": [
          { "name": "_amount", "type": "uint128", "internalType": "uint128" },
          { "name": "_start", "type": "uint64", "internalType": "uint64" },
          { "name": "_duration", "type": "uint64", "internalType": "uint64" },
          {
            "name": "_beneficiary",
            "type": "address",
            "internalType": "address"
          },
          { "name": "_cliff", "type": "uint64", "internalType": "uint64" },
          { "name": "_stopAt", "type": "uint64", "internalType": "uint64" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "token",
        "inputs": [],
        "outputs": [
          {
            "name": "",
            "type": "address",
            "internalType": "contract IERC20Mintable"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "transferOwnership",
        "inputs": [
          { "name": "newOwner", "type": "address", "internalType": "address" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "event",
        "name": "OwnershipTransferred",
        "inputs": [
          {
            "name": "previousOwner",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          }
        ],
        "anonymous": false
      },
      { "type": "error", "name": "ERC1167FailedCreateClone", "inputs": [] },
      {
        "type": "error",
        "name": "OwnableInvalidOwner",
        "inputs": [
          { "name": "owner", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "OwnableUnauthorizedAccount",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" }
        ]
      }
    ],
    "bytecode": "0x60c03461013c57611556906001600160401b03601f38849003908101601f191683019082821184831017610111578084916040968794855283398101031261013c5781516001600160a01b0392838216820361013c576020015183811680910361013c578015610125575f80546001600160a01b031981168317825586519516907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3608052610bfc908282019081118382101761011157829161095a833903905ff080156101075760a05251610819908161014182396080518181816096015281816101e6015261055f015260a05181818161044c0152818161049a015261075b0152f35b50513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b8451631e4fbdf760e01b81525f6004820152602490fd5b5f80fdfe60406080815260049081361015610014575f80fd5b5f915f3560e01c9081635b4441b81461047b5781635c60da1b14610438578163715018a6146103e15781638da5cb5b146103ba5781639ea7ccaf146102e6578163aaee754014610193578163e8df5e9414610163578163f2fde38b146100c9575063fc0c546a14610083575f80fd5b346100c557816003193601126100c557517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b9190503461015f57602036600319011261015f576001600160a01b0382358181169391929084900361015b576100fd6107b8565b83156101455750505f54826bffffffffffffffffffffffff60a01b8216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b51631e4fbdf760e01b8152908101849052602490fd5b5f80fd5b8280fd5b5050346100c55760209061018261017936610608565b93929092610717565b90516001600160a01b039091168152f35b91905082346102e3576101bf926101a936610608565b6001600160a01b03988995909491939190610717565b16835194637de676d760e11b86526020868481855afa9586156102a15784966102af575b507f000000000000000000000000000000000000000000000000000000000000000016803b156102ab5783809160448751809481936340c10f1960e01b835287898401528b60248401525af180156102a15790849161028d575b5050803b1561015f5782918451809481936386d1a69f60e01b83525af180156102835761026f575b6020838351908152f35b61027984916106cd565b61015f5782610265565b82513d86823e3d90fd5b610296906106cd565b61015f57825f61023d565b85513d86823e3d90fd5b8380fd5b9095506020813d6020116102db575b816102cb602093836106f5565b810103126102ab5751945f6101e3565b3d91506102be565b80fd5b9190503461015b5760c036600319011261015b578135916001600160801b038316830361015b5760243567ffffffffffffffff93848216820361015b5760443591858316830361015b576001600160a01b039260643590848216820361015b5760843592888416840361015b5760a43598891680990361015b576103719461036c6107b8565b610717565b1692833b1561015b5760245f92838551968794859363c2c2874560e01b85528401525af19081156103b157506103a5575080f35b6103af91506106cd565b005b513d5f823e3d90fd5b823461015b575f36600319011261015b575f5490516001600160a01b039091168152602090f35b3461015b575f36600319011261015b576103f96107b8565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b823461015b575f36600319011261015b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b823461015b5761048a36610608565b9192906104989594956107b8565b7f0000000000000000000000000000000000000000000000000000000000000000916e5af43d82803e903d91602b57fd5bf38787516104f1816104e389888c8960208601988961066f565b03601f1981018352826106f5565b51902093763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c16175f526effffffffffffffffffffffffffffff199060781b161760205260018060a01b038093603760095ff5169687156105f857873b1561015b578651630a07159b60e01b81527f00000000000000000000000000000000000000000000000000000000000000008516998101999099526001600160801b0316602489015267ffffffffffffffff908116604489015293841660648801521660848601521660a48401523060c48401525f8360e48183865af19283156105ee576020936105df575b5051908152f35b6105e8906106cd565b836105d8565b50513d5f823e3d90fd5b86516330be1a3d60e21b81528990fd5b60a090600319011261015b576004356001600160801b038116810361015b579067ffffffffffffffff90602435828116810361015b5791604435818116810361015b57916064356001600160a01b038116810361015b5791608435908116810361015b5790565b939091603c95926001600160801b03199060801b16855267ffffffffffffffff60c01b9384809260c01b16601087015260c01b1660188501526bffffffffffffffffffffffff199060601b16602084015260c01b1660348201520190565b67ffffffffffffffff81116106e157604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff8211176106e157604052565b9190610737906104e360559660439660405195869460208601988961066f565b5190206040513060388201526f5af43d82803e903d91602b57fd5bf3ff60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166014820152733d602d80600a3d3981f3363d3d373d3d3d363d73815260588101919091526037600c8201206078820152012090565b5f546001600160a01b031633036107cb57565b60405163118cdaa760e01b8152336004820152602490fdfea2646970667358221220b258723f5e243578635afbc5865e15c3d4c01fa4aa0ed9227873aea84d4e925b64736f6c63430008170033608080604052346100b8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100a957506001600160401b036002600160401b031982821601610064575b604051610b3f90816100bd8239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f8080610055565b63f92ee8a960e01b8152600490fd5b5f80fdfe6080604090808252600480361015610015575f80fd5b5f3560e01c91826307da68f5146108f2575081630a07159b146105da5781630fb5a6b4146105ad57816313d033c01461056657816338af3eed1461051f578163481c6a75146104d857816386d1a69f146102ea57816396132521146102ad578163aa8c217c1461027a578163be9a655514610243578163c2c287451461014857508063fbccedae146100f95763fc0c546a146100af575f80fd5b346100f5575f3660031901126100f5577fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c79005490516001600160a01b039091168152602090f35b5f80fd5b50346100f5575f3660031901126100f55760209061014161011942610956565b7f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec005490610935565b9051908152f35b82346100f55760203660031901126100f55781359167ffffffffffffffff8084168094036100f5577f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e100546001600160a01b031633819003610226575042841061020a57837f41e45df802422c3eeecf6ae58b76396f24dda0ed25fbf71ab2c39bc26f3c5f7e60208551838152a17f7aa8836cb72a61dd01316d20aba571501a9d434d037b3add1c8ecb2960effd00805467ffffffffffffffff19169091179055005b83604493519263174bff9d60e31b845283015242166024820152fd5b9050604492519163255cd65360e21b835233908301526024820152fd5b82346100f5575f3660031901126100f55760209067ffffffffffffffff5f80516020610aea8339815191525460801c169051908152f35b82346100f5575f3660031901126100f5576020906001600160801b035f80516020610aea83398151915254169051908152f35b82346100f5575f3660031901126100f5576020907f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec00549051908152f35b9050346100f5575f3660031901126100f5577fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a9400546001600160a01b039081169061033342610956565b907f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec009161036283548092610935565b928382018092116104c55755827fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b60208751858152a27fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c7900541691845191602083019163a9059cbb60e01b83526024840152604483015260448252608082019167ffffffffffffffff9281811084821117610492578652515f9182919082865af13d156104b8573d8281116104a557855192601f8201601f19908116603f0116840190811184821017610492578652825261044591903d5f602084013e5b83610a86565b805190811515918261046e575b505061045a57005b6024925191635274afe760e01b8352820152fd5b81925090602091810103126100f557602001518015908115036100f5575f80610452565b604186634e487b7160e01b5f525260245ffd5b604185634e487b7160e01b5f525260245ffd5b610445915060609061043f565b601186634e487b7160e01b5f525260245ffd5b82346100f5575f3660031901126100f5577f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e1005490516001600160a01b039091168152602090f35b82346100f5575f3660031901126100f5577fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a94005490516001600160a01b039091168152602090f35b82346100f5575f3660031901126100f55760209067ffffffffffffffff7f31693d6d00188b327cd3ca4c0c119ed87e5ce23375744e9439ca34bd559d780054169051908152f35b82346100f5575f3660031901126100f5576020905f80516020610aea8339815191525460c01c9051908152f35b9050346100f55760e03660031901126100f5576001600160a01b0391813583811691908290036100f557602435906001600160801b0382168092036100f5576044359167ffffffffffffffff93848416938481036100f55760643592868416938481036100f557608435968a88168098036100f55760a435958987168097036100f55760c4359b8c16809c036100f5577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009a8b549060ff828b1c16159b8216801590816108ea575b60011490816108e0575b1590816108d7575b506108c9575067ffffffffffffffff198082166001178d559796959493927f73678a14c3de3e948002c966d4aca2b47dc0358d2698ba6ae928a8226aaec456926060928e908e6108a9575b50508a51918c7f465352f68a5996d18254495c95de73131df72e79b01175425098b441ae34d2725f80a27fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a940080546001600160a01b0319908116909e17905586835260208301528a820152a167ffffffffffffffff60c01b9060c01b169167ffffffffffffffff60801b9060801b1617175f80516020610aea833981519152557fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c790090858254161790557f7dbb46702084c0aa680ad974c81904a4a2f56082b2a5ee9fff402bb61c1f8ed560208451838152a17f31693d6d00188b327cd3ca4c0c119ed87e5ce23375744e9439ca34bd559d7800918254161790555193807f8fb535e68a1d9e939f56e832df97d6e8949dc31fe7403ecc0a883d5263297c2e5f80a27f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e1009182541617905561086d57005b805468ff000000000000000019169055600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b68ffffffffffffffffff1916680100000000000000011790558d5f6106ff565b895163f92ee8a960e01b8152fd5b9050155f6106b4565b303b1591506106ac565b8d91506106a2565b346100f5575f3660031901126100f55760209067ffffffffffffffff7f7aa8836cb72a61dd01316d20aba571501a9d434d037b3add1c8ecb2960effd0054168152f35b9190820391821161094257565b634e487b7160e01b5f52601160045260245ffd5b67ffffffffffffffff7f7aa8836cb72a61dd01316d20aba571501a9d434d037b3add1c8ecb2960effd00541690811515806109a8575b1561099e575061099b906109b1565b90565b61099b91506109b1565b5080821061098c565b7f31693d6d00188b327cd3ca4c0c119ed87e5ce23375744e9439ca34bd559d78005467ffffffffffffffff168110156109e957505f90565b61099b905f80516020610aea8339815191525467ffffffffffffffff91828260801c168082105f14610a1d57505050505f90565b8260c01c9384820181811161094257168210610a435750506001600160801b0391501690565b6001600160801b03610a5792931692610935565b90818102918183041490151715610942578115610a72570490565b634e487b7160e01b5f52601260045260245ffd5b90610aad5750805115610a9b57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610ae0575b610abe575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610ab656fe7424e9331a1a664cd2534451a453e8af8c82aa8e57e61f926d03aeb673afb400a264697066735822122074cab29324e646671e89228b8fff672a81db5ff0e221fbc9938a3e8d386e17b364736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/managed/JITSingleBeneficiaryLinearCliffERC20TransferVestingStoppableManager.sol:JITSingleBeneficiaryLinearCliffERC20TransferVestingStoppableManager",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/proxy/Clones.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    /**\n     * @dev A clone instance deployment failed.\n     */\n    error ERC1167FailedCreateClone();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert ERC1167FailedCreateClone();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert ERC1167FailedCreateClone();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "src/SingleBeneficiaryLinearCliffERC20TransferVestingStoppable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"../lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\";\n\nimport {SingleBeneficiaryLinearERC20TransferVesting, IERC20} from \"./SingleBeneficiaryLinearERC20TransferVesting.sol\";\nimport {Vesting} from \"./vesting/Vesting.sol\";\nimport {LinearVesting} from \"./vesting/LinearVesting.sol\";\nimport {Cliff} from \"./vesting/Cliff.sol\";\nimport {Manager} from \"./vesting/Manager.sol\";\nimport {Stoppable} from \"./vesting/Stoppable.sol\";\n\ncontract SingleBeneficiaryLinearCliffERC20TransferVestingStoppable is\n    SingleBeneficiaryLinearERC20TransferVesting,\n    Cliff,\n    Manager,\n    Stoppable\n{\n    function __SingleBeneficiaryLinearCliffERC20TransferVestingStoppable_init(\n        IERC20 _token,\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary,\n        uint64 _cliff,\n        address _manager\n    ) internal {\n        __SingleBeneficiaryLinearERC20TransferVesting_init(_token, _amount, _start, _duration, _beneficiary);\n        __Cliff_init(_cliff);\n        __Manager_init(_manager);\n        __Stoppable_init();\n    }\n\n    function _vestingUnlocked(uint256 _timestamp)\n        internal\n        view\n        override(Stoppable, Cliff, LinearVesting, Vesting)\n        returns (uint256)\n    {\n        return super._vestingUnlocked(_timestamp);\n    }\n}\n\ncontract SingleBeneficiaryLinearCliffERC20TransferVestingStoppableStandalone is\n    SingleBeneficiaryLinearCliffERC20TransferVestingStoppable\n{\n    constructor(\n        IERC20 _token,\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary,\n        uint64 _cliff,\n        address _manager\n    ) {\n        __SingleBeneficiaryLinearCliffERC20TransferVestingStoppable_init(\n            _token, _amount, _start, _duration, _beneficiary, _cliff, _manager\n        );\n    }\n}\n\ncontract SingleBeneficiaryLinearCliffERC20TransferVestingStoppableProxy is\n    Initializable,\n    SingleBeneficiaryLinearCliffERC20TransferVestingStoppable\n{\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        IERC20 _token,\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary,\n        uint64 _cliff,\n        address _manager\n    ) external initializer {\n        __SingleBeneficiaryLinearCliffERC20TransferVestingStoppable_init(\n            _token, _amount, _start, _duration, _beneficiary, _cliff, _manager\n        );\n    }\n}\n"
        },
        "src/SingleBeneficiaryLinearERC20TransferVesting.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"../lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\";\n\nimport {SingleBeneficiaryLinearVesting} from \"./vesting/extensions/SingleBeneficiaryLinearVesting.sol\";\nimport {ERC20TransferReward, IERC20} from \"./rewards/ERC20TransferReward.sol\";\n\ncontract SingleBeneficiaryLinearERC20TransferVesting is SingleBeneficiaryLinearVesting, ERC20TransferReward {\n    function __SingleBeneficiaryLinearERC20TransferVesting_init(\n        IERC20 _token,\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary\n    ) internal {\n        __SingleBeneficiaryLinearVesting_init(_amount, _start, _duration, _beneficiary);\n        __ERC20TransferReward_init(_token);\n    }\n}\n\ncontract SingleBeneficiaryLinearERC20TransferVestingStandalone is SingleBeneficiaryLinearERC20TransferVesting {\n    constructor(IERC20 _token, uint128 _amount, uint64 _start, uint64 _duration, address _beneficiary) {\n        __SingleBeneficiaryLinearERC20TransferVesting_init(_token, _amount, _start, _duration, _beneficiary);\n    }\n}\n\ncontract SingleBeneficiaryLinearERC20TransferVestingProxy is\n    Initializable,\n    SingleBeneficiaryLinearERC20TransferVesting\n{\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(IERC20 _token, uint128 _amount, uint64 _start, uint64 _duration, address _beneficiary)\n        external\n        initializer\n    {\n        __SingleBeneficiaryLinearERC20TransferVesting_init(_token, _amount, _start, _duration, _beneficiary);\n    }\n}\n"
        },
        "src/managed/JITSingleBeneficiaryLinearCliffERC20TransferVestingStoppableManager.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {Clones} from \"../../lib/openzeppelin-contracts/contracts/proxy/Clones.sol\";\n\nimport {\n    SingleBeneficiaryLinearCliffERC20TransferVestingStoppable,\n    SingleBeneficiaryLinearCliffERC20TransferVestingStoppableProxy\n} from \"../SingleBeneficiaryLinearCliffERC20TransferVestingStoppable.sol\";\nimport {IERC20Mintable} from \"../rewards/IERC20Mintable.sol\";\n\ncontract JITSingleBeneficiaryLinearCliffERC20TransferVestingStoppableManager is Ownable {\n    IERC20Mintable public immutable token;\n    SingleBeneficiaryLinearCliffERC20TransferVestingStoppableProxy public immutable implementation;\n\n    constructor(IERC20Mintable _token, address _admin) Ownable(_admin) {\n        token = _token;\n        implementation = new SingleBeneficiaryLinearCliffERC20TransferVestingStoppableProxy();\n    }\n\n    function getAddress(uint128 _amount, uint64 _start, uint64 _duration, address _beneficiary, uint64 _cliff)\n        public\n        view\n        returns (address)\n    {\n        return Clones.predictDeterministicAddress(\n            address(implementation), keccak256(abi.encodePacked(_amount, _start, _duration, _beneficiary, _cliff))\n        );\n    }\n\n    function createVesting(uint128 _amount, uint64 _start, uint64 _duration, address _beneficiary, uint64 _cliff)\n        external\n        onlyOwner\n        returns (address vesting)\n    {\n        vesting = Clones.cloneDeterministic(\n            address(implementation), keccak256(abi.encodePacked(_amount, _start, _duration, _beneficiary, _cliff))\n        );\n        SingleBeneficiaryLinearCliffERC20TransferVestingStoppableProxy(vesting).initialize(\n            token, _amount, _start, _duration, _beneficiary, _cliff, address(this)\n        );\n    }\n\n    function release(uint128 _amount, uint64 _start, uint64 _duration, address _beneficiary, uint64 _cliff)\n        external\n        returns (uint256 released)\n    {\n        SingleBeneficiaryLinearCliffERC20TransferVestingStoppable vesting =\n        SingleBeneficiaryLinearCliffERC20TransferVestingStoppable(\n            getAddress(_amount, _start, _duration, _beneficiary, _cliff)\n        );\n        released = vesting.releasable();\n        token.mint(address(vesting), released);\n        vesting.release();\n    }\n\n    function stopAt(\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary,\n        uint64 _cliff,\n        uint64 _stopAt\n    ) external onlyOwner {\n        SingleBeneficiaryLinearCliffERC20TransferVestingStoppable vesting =\n        SingleBeneficiaryLinearCliffERC20TransferVestingStoppable(\n            getAddress(_amount, _start, _duration, _beneficiary, _cliff)\n        );\n        vesting.stopAt(_stopAt);\n    }\n}\n"
        },
        "src/rewards/ERC20TransferReward.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Reward} from \"./Reward.sol\";\n\nimport {SafeERC20, IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ERC20RewardStorage} from \"../storage/ERC20RewardStorage.sol\";\n\nabstract contract ERC20TransferReward is Reward {\n    event ERC20Released(address indexed beneficiary, uint256 amount);\n\n    function __ERC20TransferReward_init(IERC20 _token) internal {\n        ERC20RewardStorage.Storage storage $ = ERC20RewardStorage.getStorage();\n        $.token = _token;\n    }\n\n    function token() public view virtual returns (IERC20) {\n        ERC20RewardStorage.Storage storage $ = ERC20RewardStorage.getStorage();\n        return $.token;\n    }\n\n    function _reward(address _beneficiary, uint256 _amount) internal virtual override {\n        emit ERC20Released(_beneficiary, _amount);\n        SafeERC20.safeTransfer(token(), _beneficiary, _amount);\n    }\n}\n"
        },
        "src/rewards/IERC20Mintable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    /// @notice Mints tokens to a specific account.\n    /// @param account The account that will receive the minted tokens.\n    /// @param amount The amount of tokens to mint.\n    /// @dev Should be locked behind a permission/restriction.\n    function mint(address account, uint256 amount) external;\n}\n"
        },
        "src/rewards/Reward.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Reward {\n    function _reward(address _beneficiary, uint256 _amount) internal virtual;\n}\n"
        },
        "src/storage/BeneficiaryStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary BeneficiaryStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"beneficiary.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0xbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a9400;\n\n    /// @custom:storage-location erc7201:beneficiary.vesting.plopmenz\n    struct Storage {\n        address beneficiary;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/storage/CliffStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary CliffStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"cliff.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0x31693d6d00188b327cd3ca4c0c119ed87e5ce23375744e9439ca34bd559d7800;\n\n    /// @custom:storage-location erc7201:cliff.vesting.plopmenz\n    struct Storage {\n        uint64 cliff;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/storage/ERC20RewardStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nlibrary ERC20RewardStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"erc20.reward.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0xa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c7900;\n\n    /// @custom:storage-location erc7201:erc20.reward.vesting.plopmenz\n    struct Storage {\n        IERC20 token;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/storage/LinearVestingStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary LinearVestingStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"linear.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0x7424e9331a1a664cd2534451a453e8af8c82aa8e57e61f926d03aeb673afb400;\n\n    /// @custom:storage-location erc7201:linear.vesting.plopmenz\n    struct Storage {\n        uint128 amount;\n        uint64 start;\n        uint64 duration;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/storage/ManagerStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary ManagerStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"manager.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    // bytes32 private constant SLOT = 0x9bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e100;\n\n    /// @custom:storage-location erc7201:manager.vesting.plopmenz\n    struct Storage {\n        address manager;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := 0x9bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e100\n        }\n    }\n}\n"
        },
        "src/storage/ReleasedStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary ReleasedStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"released.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0x8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec00;\n\n    /// @custom:storage-location erc7201:released.vesting.plopmenz\n    struct Storage {\n        uint256 released;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/storage/StoppableStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary StoppableStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"stop.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0x7aa8836cb72a61dd01316d20aba571501a9d434d037b3add1c8ecb2960effd00;\n\n    /// @custom:storage-location erc7201:stop.vesting.plopmenz\n    struct Storage {\n        uint64 stop;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/vesting/Beneficiary.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {BeneficiaryStorage} from \"../storage/BeneficiaryStorage.sol\";\n\nabstract contract Beneficiary {\n    event BeneficiaryCreated(address indexed beneficiary);\n\n    function __Beneficiary_init(address _beneficiary) internal {\n        emit BeneficiaryCreated(_beneficiary);\n        BeneficiaryStorage.Storage storage $ = BeneficiaryStorage.getStorage();\n        $.beneficiary = _beneficiary;\n    }\n\n    function beneficiary() public view virtual returns (address) {\n        BeneficiaryStorage.Storage storage $ = BeneficiaryStorage.getStorage();\n        return $.beneficiary;\n    }\n}\n"
        },
        "src/vesting/Cliff.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VestingBase} from \"./VestingBase.sol\";\n\nimport {CliffStorage} from \"../storage/CliffStorage.sol\";\n\nabstract contract Cliff is VestingBase {\n    event CliffCreated(uint64 cliff);\n\n    function __Cliff_init(uint64 _cliff) internal {\n        emit CliffCreated(_cliff);\n        CliffStorage.Storage storage $ = CliffStorage.getStorage();\n        $.cliff = _cliff;\n    }\n\n    function cliff() public view virtual returns (uint128) {\n        CliffStorage.Storage storage $ = CliffStorage.getStorage();\n        return $.cliff;\n    }\n\n    function _vestingUnlocked(uint256 _timestamp) internal view virtual override returns (uint256) {\n        if (_timestamp < cliff()) {\n            return 0;\n        } else {\n            return super._vestingUnlocked(_timestamp);\n        }\n    }\n}\n"
        },
        "src/vesting/LinearVesting.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VestingBase} from \"./VestingBase.sol\";\n\nimport {LinearVestingStorage} from \"../storage/LinearVestingStorage.sol\";\n\nabstract contract LinearVesting is VestingBase {\n    event LinearVestingCreated(uint128 amount, uint64 start, uint64 duration);\n\n    function __LinearVesting_init(uint128 _amount, uint64 _start, uint64 _duration) internal {\n        emit LinearVestingCreated(_amount, _start, _duration);\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        $.amount = _amount;\n        $.start = _start;\n        $.duration = _duration;\n    }\n\n    function amount() public view virtual returns (uint128) {\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        return $.amount;\n    }\n\n    function start() public view virtual returns (uint64) {\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        return $.start;\n    }\n\n    function duration() public view virtual returns (uint64) {\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        return $.duration;\n    }\n\n    // From Openzeppelin VestingWallet (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v5.0/contracts/finance/VestingWallet.sol)\n    function _vestingUnlocked(uint256 _timestamp) internal view virtual override returns (uint256) {\n        if (_timestamp < start()) {\n            return 0;\n        } else if (_timestamp >= (start() + duration())) {\n            return amount();\n        } else {\n            return (amount() * (_timestamp - start())) / duration();\n        }\n    }\n}\n"
        },
        "src/vesting/Managed.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Managed {\n    modifier onlyManager() virtual;\n}\n"
        },
        "src/vesting/Manager.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Managed} from \"./Managed.sol\";\n\nimport {ManagerStorage} from \"../storage/ManagerStorage.sol\";\n\nabstract contract Manager is Managed {\n    error SenderNotManager(address sender, address manager);\n\n    event ManagerCreated(address indexed manager);\n\n    function __Manager_init(address _manager) internal {\n        emit ManagerCreated(_manager);\n        ManagerStorage.Storage storage $ = ManagerStorage.getStorage();\n        $.manager = _manager;\n    }\n\n    function manager() public view virtual returns (address) {\n        ManagerStorage.Storage storage $ = ManagerStorage.getStorage();\n        return $.manager;\n    }\n\n    modifier onlyManager() virtual override {\n        if (msg.sender != manager()) {\n            revert SenderNotManager(msg.sender, manager());\n        }\n        _;\n    }\n}\n"
        },
        "src/vesting/Released.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Vesting} from \"./Vesting.sol\";\n\nimport {ReleasedStorage} from \"../storage/ReleasedStorage.sol\";\n\nabstract contract Released is Vesting {\n    function __Released_init() internal {}\n\n    function released() public view virtual returns (uint256) {\n        ReleasedStorage.Storage storage $ = ReleasedStorage.getStorage();\n        return $.released;\n    }\n\n    function releasable() public view virtual returns (uint256) {\n        return _vestingUnlocked(block.timestamp) - released();\n    }\n\n    function _release(address _account) internal virtual {\n        uint256 releaseAmount = releasable();\n        ReleasedStorage.Storage storage $ = ReleasedStorage.getStorage();\n        $.released += releaseAmount;\n        _reward(_account, releaseAmount);\n    }\n}\n"
        },
        "src/vesting/Stoppable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VestingBase} from \"./VestingBase.sol\";\nimport {Managed} from \"./Managed.sol\";\n\nimport {StoppableStorage} from \"../storage/StoppableStorage.sol\";\n\n/// @dev This does not burn or recover any tokens inside of the contract that might become unobtainable due to the earlier stop date!\nabstract contract Stoppable is VestingBase, Managed {\n    error StopMustBeInTheFuture(uint64 stop, uint64 currentTime);\n\n    event StopAt(uint64 stop);\n\n    function __Stoppable_init() internal {}\n\n    function stop() public view virtual returns (uint64) {\n        StoppableStorage.Storage storage $ = StoppableStorage.getStorage();\n        return $.stop;\n    }\n\n    function stopAt(uint64 timestamp) public virtual onlyManager {\n        StoppableStorage.Storage storage $ = StoppableStorage.getStorage();\n        if (timestamp < block.timestamp) {\n            revert StopMustBeInTheFuture(timestamp, uint64(block.timestamp));\n        }\n\n        emit StopAt(timestamp);\n        $.stop = timestamp;\n    }\n\n    function _vestingUnlocked(uint256 _timestamp) internal view virtual override returns (uint256) {\n        StoppableStorage.Storage storage $ = StoppableStorage.getStorage();\n        if ($.stop != 0 && $.stop < _timestamp) {\n            return super._vestingUnlocked($.stop);\n        } else {\n            return super._vestingUnlocked(_timestamp);\n        }\n    }\n}\n"
        },
        "src/vesting/Vesting.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Reward} from \"../rewards/Reward.sol\";\n\nabstract contract Vesting is Reward {\n    function _vestingUnlocked(uint256 _timestamp) internal view virtual returns (uint256);\n}\n"
        },
        "src/vesting/VestingBase.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Vesting} from \"./Vesting.sol\";\n\nabstract contract VestingBase is Vesting {\n    error Unimplemented();\n\n    function _vestingUnlocked(uint256 _timestamp) internal view virtual override returns (uint256) {\n        (_timestamp);\n        revert Unimplemented();\n    }\n}\n"
        },
        "src/vesting/extensions/SingleBeneficiaryLinearVesting.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Released} from \"../Released.sol\";\nimport {Beneficiary} from \"../Beneficiary.sol\";\nimport {LinearVesting} from \"../LinearVesting.sol\";\n\nabstract contract SingleBeneficiaryLinearVesting is Released, Beneficiary, LinearVesting {\n    function __SingleBeneficiaryLinearVesting_init(\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary\n    ) internal {\n        __Released_init();\n        __Beneficiary_init(_beneficiary);\n        __LinearVesting_init(_amount, _start, _duration);\n    }\n\n    function release() public virtual {\n        _release(beneficiary());\n    }\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "murky/=lib/murky/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/open-token/lib/vesting",
  "submitted": {
    "transactionHash": "0x3b6bc03900b8846e22dfabda29fcea9709816d93ab57b56db8b998713551e338",
    "date": "2024-10-10T14:01:06.017Z"
  }
}
