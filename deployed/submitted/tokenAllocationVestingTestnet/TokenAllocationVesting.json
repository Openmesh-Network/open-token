{
  "type": "deployment",
  "id": "TokenAllocationVesting",
  "batch": "tokenAllocationVestingTestnet",
  "batchIndex": 0,
  "deploymentAddress": "0xBa65b026f57c46eE57AB917f5031957920488b58",
  "constructorArgs": [],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x000000000000000000000000000000000000000000000000706c6f706d656e7a608080604052346100b8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100a957506001600160401b036002600160401b031982821601610064575b604051610a2d90816100bd8239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f8080610055565b63f92ee8a960e01b8152600490fd5b5f80fdfe6080604090808252600480361015610015575f80fd5b5f3560e01c9182630fb5a6b414610876575081630fc2fd991461070157816338af3eed146106ba578163481c6a751461067357816386d1a69f146104865781639613252114610449578163aa8c217c14610416578163be9a6555146103df578163f003d7b11461013157508063fbccedae146100e35763fc0c546a14610099575f80fd5b346100df575f3660031901126100df577fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c79005490516001600160a01b039091168152602090f35b5f80fd5b50346100df575f3660031901126100df5760209061012a6101026108dc565b7f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec0054906108cf565b9051908152f35b9050346100df5760c03660031901126100df576001600160a01b0391813583811691908290036100df57602435906001600160801b0382168092036100df5767ffffffffffffffff92604435848116938482036100df57606435868116958682036100df57608435968a88168098036100df5760a4359a8b16809b036100df577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00998a549060ff828a1c16159a8216801590816103d7575b60011490816103cd575b1590816103c4575b506103b6575067ffffffffffffffff1981166001178b557f73678a14c3de3e948002c966d4aca2b47dc0358d2698ba6ae928a8226aaec4569260609290918b610397575b508851918a7f465352f68a5996d18254495c95de73131df72e79b01175425098b441ae34d2725f80a27fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a940080546001600160a01b0319908116909c179055868352602083015288820152a167ffffffffffffffff60c01b9060c01b169167ffffffffffffffff60801b9060801b1617175f805160206109d8833981519152557fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c790090838254161790555193807f8fb535e68a1d9e939f56e832df97d6e8949dc31fe7403ecc0a883d5263297c2e5f80a27f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e1009182541617905561035b57005b805468ff000000000000000019169055600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b68ffffffffffffffffff191668010000000000000001178c555f61023f565b885163f92ee8a960e01b8152fd5b9050155f6101fb565b303b1591506101f3565b8c91506101e9565b82346100df575f3660031901126100df5760209067ffffffffffffffff5f805160206109d88339815191525460801c169051908152f35b82346100df575f3660031901126100df576020906001600160801b035f805160206109d883398151915254169051908152f35b82346100df575f3660031901126100df576020907f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec00549051908152f35b9050346100df575f3660031901126100df577fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a9400546001600160a01b03908116906104ce6108dc565b907f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec00916104fd835480926108cf565b928382018092116106605755827fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b60208751858152a27fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c7900541691845191602083019163a9059cbb60e01b83526024840152604483015260448252608082019167ffffffffffffffff928181108482111761062d578652515f9182919082865af13d15610653573d82811161064057855192601f8201601f19908116603f011684019081118482101761062d57865282526105e091903d5f602084013e5b83610974565b8051908115159182610609575b50506105f557005b6024925191635274afe760e01b8352820152fd5b81925090602091810103126100df57602001518015908115036100df575f806105ed565b604186634e487b7160e01b5f525260245ffd5b604185634e487b7160e01b5f525260245ffd5b6105e091506060906105da565b601186634e487b7160e01b5f525260245ffd5b82346100df575f3660031901126100df577f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e1005490516001600160a01b039091168152602090f35b82346100df575f3660031901126100df577fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a94005490516001600160a01b039091168152602090f35b82346100df5760203660031901126100df57813567ffffffffffffffff91828216908183036100df577f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e100546001600160a01b03163381900361085857505f805160206109d883398151915294855494808660801c16610780868261089f565b82429116106108155750508460c01c8084116107e25750507f1e87f58dc225e525231e847059eaa3268980280f567817333ea5d0eb158eae079160209151908152a16001600160c01b0390911660c09190911b6001600160c01b031916179055005b9151631f68bbcb60e31b815267ffffffffffffffff808616928201928352909216602082015281906040010390fd5b0390fd5b9161082486610811939461089f565b935193849363174bff9d60e31b8552421691840190602090939293604083019467ffffffffffffffff809216845216910152565b905163255cd65360e21b815233818701526024810191909152604490fd5b346100df575f3660031901126100df576020905f805160206109d88339815191525460c01c8152f35b91909167ffffffffffffffff808094169116019182116108bb57565b634e487b7160e01b5f52601160045260245ffd5b919082039182116108bb57565b5f805160206109d88339815191525467ffffffffffffffff90818160801c168042105f1461090b575050505f90565b8160c01c9261091a848361089f565b16421061093057506001600160801b0391501690565b906001600160801b03610945911691426108cf565b908181029181830414901517156108bb578115610960570490565b634e487b7160e01b5f52601260045260245ffd5b9061099b575080511561098957805190602001fd5b604051630a12f52160e11b8152600490fd5b815115806109ce575b6109ac575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156109a456fe7424e9331a1a664cd2534451a453e8af8c82aa8e57e61f926d03aeb673afb400a264697066735822122024e849188260f9085ad7692795526a1cd09c90c8c8491a04748526f44332cd1f64736f6c63430008170033",
  "gas": "651822",
  "from": "0x6b221aA392146E31743E1beB5827e88284B09753",
  "transactionSettings": {
    "chainId": 11155111,
    "nonce": "48",
    "baseFee": "19176277900",
    "priorityFee": "1000000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000plopmenz",
  "artifact": {
    "abi": [
      { "type": "constructor", "inputs": [], "stateMutability": "nonpayable" },
      {
        "type": "function",
        "name": "amount",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "uint128", "internalType": "uint128" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "beneficiary",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "duration",
        "inputs": [],
        "outputs": [{ "name": "", "type": "uint64", "internalType": "uint64" }],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "initialize",
        "inputs": [
          {
            "name": "_token",
            "type": "address",
            "internalType": "contract IERC20"
          },
          { "name": "_amount", "type": "uint128", "internalType": "uint128" },
          { "name": "_start", "type": "uint64", "internalType": "uint64" },
          { "name": "_duration", "type": "uint64", "internalType": "uint64" },
          {
            "name": "_beneficiary",
            "type": "address",
            "internalType": "address"
          },
          { "name": "_manager", "type": "address", "internalType": "address" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "manager",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "releasable",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "release",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "released",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "start",
        "inputs": [],
        "outputs": [{ "name": "", "type": "uint64", "internalType": "uint64" }],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "stop",
        "inputs": [
          { "name": "newDuration", "type": "uint64", "internalType": "uint64" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "token",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "contract IERC20" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "event",
        "name": "BeneficiaryCreated",
        "inputs": [
          {
            "name": "beneficiary",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "ERC20Released",
        "inputs": [
          {
            "name": "beneficiary",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          },
          {
            "name": "amount",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "Initialized",
        "inputs": [
          {
            "name": "version",
            "type": "uint64",
            "indexed": false,
            "internalType": "uint64"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "LinearVestingCreated",
        "inputs": [
          {
            "name": "amount",
            "type": "uint128",
            "indexed": false,
            "internalType": "uint128"
          },
          {
            "name": "start",
            "type": "uint64",
            "indexed": false,
            "internalType": "uint64"
          },
          {
            "name": "duration",
            "type": "uint64",
            "indexed": false,
            "internalType": "uint64"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "ManagerCreated",
        "inputs": [
          {
            "name": "manager",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "Stop",
        "inputs": [
          {
            "name": "newDuration",
            "type": "uint64",
            "indexed": false,
            "internalType": "uint64"
          }
        ],
        "anonymous": false
      },
      {
        "type": "error",
        "name": "AddressEmptyCode",
        "inputs": [
          { "name": "target", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "AddressInsufficientBalance",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" }
        ]
      },
      { "type": "error", "name": "FailedInnerCall", "inputs": [] },
      { "type": "error", "name": "InvalidInitialization", "inputs": [] },
      { "type": "error", "name": "NotInitializing", "inputs": [] },
      {
        "type": "error",
        "name": "SafeERC20FailedOperation",
        "inputs": [
          { "name": "token", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "SenderNotManager",
        "inputs": [
          { "name": "sender", "type": "address", "internalType": "address" },
          { "name": "manager", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "StopMustBeInTheFuture",
        "inputs": [
          { "name": "stop", "type": "uint64", "internalType": "uint64" },
          { "name": "currentTime", "type": "uint64", "internalType": "uint64" }
        ]
      },
      {
        "type": "error",
        "name": "StopMustDecreaseDuration",
        "inputs": [
          { "name": "newDuration", "type": "uint64", "internalType": "uint64" },
          { "name": "oldDuration", "type": "uint64", "internalType": "uint64" }
        ]
      }
    ],
    "bytecode": "0x608080604052346100b8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100a957506001600160401b036002600160401b031982821601610064575b604051610a2d90816100bd8239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f8080610055565b63f92ee8a960e01b8152600490fd5b5f80fdfe6080604090808252600480361015610015575f80fd5b5f3560e01c9182630fb5a6b414610876575081630fc2fd991461070157816338af3eed146106ba578163481c6a751461067357816386d1a69f146104865781639613252114610449578163aa8c217c14610416578163be9a6555146103df578163f003d7b11461013157508063fbccedae146100e35763fc0c546a14610099575f80fd5b346100df575f3660031901126100df577fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c79005490516001600160a01b039091168152602090f35b5f80fd5b50346100df575f3660031901126100df5760209061012a6101026108dc565b7f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec0054906108cf565b9051908152f35b9050346100df5760c03660031901126100df576001600160a01b0391813583811691908290036100df57602435906001600160801b0382168092036100df5767ffffffffffffffff92604435848116938482036100df57606435868116958682036100df57608435968a88168098036100df5760a4359a8b16809b036100df577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00998a549060ff828a1c16159a8216801590816103d7575b60011490816103cd575b1590816103c4575b506103b6575067ffffffffffffffff1981166001178b557f73678a14c3de3e948002c966d4aca2b47dc0358d2698ba6ae928a8226aaec4569260609290918b610397575b508851918a7f465352f68a5996d18254495c95de73131df72e79b01175425098b441ae34d2725f80a27fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a940080546001600160a01b0319908116909c179055868352602083015288820152a167ffffffffffffffff60c01b9060c01b169167ffffffffffffffff60801b9060801b1617175f805160206109d8833981519152557fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c790090838254161790555193807f8fb535e68a1d9e939f56e832df97d6e8949dc31fe7403ecc0a883d5263297c2e5f80a27f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e1009182541617905561035b57005b805468ff000000000000000019169055600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b68ffffffffffffffffff191668010000000000000001178c555f61023f565b885163f92ee8a960e01b8152fd5b9050155f6101fb565b303b1591506101f3565b8c91506101e9565b82346100df575f3660031901126100df5760209067ffffffffffffffff5f805160206109d88339815191525460801c169051908152f35b82346100df575f3660031901126100df576020906001600160801b035f805160206109d883398151915254169051908152f35b82346100df575f3660031901126100df576020907f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec00549051908152f35b9050346100df575f3660031901126100df577fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a9400546001600160a01b03908116906104ce6108dc565b907f8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec00916104fd835480926108cf565b928382018092116106605755827fc0e523490dd523c33b1878c9eb14ff46991e3f5b2cd33710918618f2a39cba1b60208751858152a27fa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c7900541691845191602083019163a9059cbb60e01b83526024840152604483015260448252608082019167ffffffffffffffff928181108482111761062d578652515f9182919082865af13d15610653573d82811161064057855192601f8201601f19908116603f011684019081118482101761062d57865282526105e091903d5f602084013e5b83610974565b8051908115159182610609575b50506105f557005b6024925191635274afe760e01b8352820152fd5b81925090602091810103126100df57602001518015908115036100df575f806105ed565b604186634e487b7160e01b5f525260245ffd5b604185634e487b7160e01b5f525260245ffd5b6105e091506060906105da565b601186634e487b7160e01b5f525260245ffd5b82346100df575f3660031901126100df577f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e1005490516001600160a01b039091168152602090f35b82346100df575f3660031901126100df577fbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a94005490516001600160a01b039091168152602090f35b82346100df5760203660031901126100df57813567ffffffffffffffff91828216908183036100df577f09bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e100546001600160a01b03163381900361085857505f805160206109d883398151915294855494808660801c16610780868261089f565b82429116106108155750508460c01c8084116107e25750507f1e87f58dc225e525231e847059eaa3268980280f567817333ea5d0eb158eae079160209151908152a16001600160c01b0390911660c09190911b6001600160c01b031916179055005b9151631f68bbcb60e31b815267ffffffffffffffff808616928201928352909216602082015281906040010390fd5b0390fd5b9161082486610811939461089f565b935193849363174bff9d60e31b8552421691840190602090939293604083019467ffffffffffffffff809216845216910152565b905163255cd65360e21b815233818701526024810191909152604490fd5b346100df575f3660031901126100df576020905f805160206109d88339815191525460c01c8152f35b91909167ffffffffffffffff808094169116019182116108bb57565b634e487b7160e01b5f52601160045260245ffd5b919082039182116108bb57565b5f805160206109d88339815191525467ffffffffffffffff90818160801c168042105f1461090b575050505f90565b8160c01c9261091a848361089f565b16421061093057506001600160801b0391501690565b906001600160801b03610945911691426108cf565b908181029181830414901517156108bb578115610960570490565b634e487b7160e01b5f52601260045260245ffd5b9061099b575080511561098957805190602001fd5b604051630a12f52160e11b8152600490fd5b815115806109ce575b6109ac575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156109a456fe7424e9331a1a664cd2534451a453e8af8c82aa8e57e61f926d03aeb673afb400a264697066735822122024e849188260f9085ad7692795526a1cd09c90c8c8491a04748526f44332cd1f64736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/SingleBeneficiaryLinearERC20TransferVestingStoppableProxy.sol:SingleBeneficiaryLinearERC20TransferVestingStoppableProxy",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
        },
        "src/SingleBeneficiaryLinearERC20TransferVesting.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"../lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\";\n\nimport {SingleBeneficiaryLinearVesting} from \"./vesting/extensions/SingleBeneficiaryLinearVesting.sol\";\nimport {ERC20TransferReward, IERC20} from \"./rewards/ERC20TransferReward.sol\";\n\ncontract SingleBeneficiaryLinearERC20TransferVesting is SingleBeneficiaryLinearVesting, ERC20TransferReward {\n    function __SingleBeneficiaryLinearERC20TransferVesting_init(\n        IERC20 _token,\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary\n    ) internal {\n        __SingleBeneficiaryLinearVesting_init(_amount, _start, _duration, _beneficiary);\n        __ERC20TransferReward_init(_token);\n    }\n}\n\ncontract SingleBeneficiaryLinearERC20TransferVestingStandalone is SingleBeneficiaryLinearERC20TransferVesting {\n    constructor(IERC20 _token, uint128 _amount, uint64 _start, uint64 _duration, address _beneficiary) {\n        __SingleBeneficiaryLinearERC20TransferVesting_init(_token, _amount, _start, _duration, _beneficiary);\n    }\n}\n\ncontract SingleBeneficiaryLinearERC20TransferVestingProxy is\n    Initializable,\n    SingleBeneficiaryLinearERC20TransferVesting\n{\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(IERC20 _token, uint128 _amount, uint64 _start, uint64 _duration, address _beneficiary)\n        external\n        initializer\n    {\n        __SingleBeneficiaryLinearERC20TransferVesting_init(_token, _amount, _start, _duration, _beneficiary);\n    }\n}\n"
        },
        "src/SingleBeneficiaryLinearERC20TransferVestingStoppableProxy.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"../lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\";\n\nimport {SingleBeneficiaryLinearERC20TransferVesting, IERC20} from \"./SingleBeneficiaryLinearERC20TransferVesting.sol\";\nimport {Manager} from \"./vesting/Manager.sol\";\nimport {LinearVestingStoppable} from \"./vesting/LinearVestingStoppable.sol\";\n\ncontract SingleBeneficiaryLinearERC20TransferVestingStoppable is\n    SingleBeneficiaryLinearERC20TransferVesting,\n    Manager,\n    LinearVestingStoppable\n{\n    function __SingleBeneficiaryLinearERC20TransferVestingStoppable_init(\n        IERC20 _token,\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary,\n        address _manager\n    ) internal {\n        __SingleBeneficiaryLinearERC20TransferVesting_init(_token, _amount, _start, _duration, _beneficiary);\n        __Manager_init(_manager);\n        __LinearVestingStoppable_init();\n    }\n}\n\ncontract SingleBeneficiaryLinearERC20TransferVestingStoppableStandalone is\n    SingleBeneficiaryLinearERC20TransferVestingStoppable\n{\n    constructor(\n        IERC20 _token,\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary,\n        address _manager\n    ) {\n        __SingleBeneficiaryLinearERC20TransferVestingStoppable_init(\n            _token, _amount, _start, _duration, _beneficiary, _manager\n        );\n    }\n}\n\ncontract SingleBeneficiaryLinearERC20TransferVestingStoppableProxy is\n    Initializable,\n    SingleBeneficiaryLinearERC20TransferVestingStoppable\n{\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        IERC20 _token,\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary,\n        address _manager\n    ) external initializer {\n        __SingleBeneficiaryLinearERC20TransferVestingStoppable_init(\n            _token, _amount, _start, _duration, _beneficiary, _manager\n        );\n    }\n}\n"
        },
        "src/rewards/ERC20TransferReward.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Reward} from \"./Reward.sol\";\n\nimport {SafeERC20, IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ERC20RewardStorage} from \"../storage/ERC20RewardStorage.sol\";\n\nabstract contract ERC20TransferReward is Reward {\n    event ERC20Released(address indexed beneficiary, uint256 amount);\n\n    function __ERC20TransferReward_init(IERC20 _token) internal {\n        ERC20RewardStorage.Storage storage $ = ERC20RewardStorage.getStorage();\n        $.token = _token;\n    }\n\n    function token() public view virtual returns (IERC20) {\n        ERC20RewardStorage.Storage storage $ = ERC20RewardStorage.getStorage();\n        return $.token;\n    }\n\n    function _reward(address _beneficiary, uint256 _amount) internal virtual override {\n        emit ERC20Released(_beneficiary, _amount);\n        SafeERC20.safeTransfer(token(), _beneficiary, _amount);\n    }\n}\n"
        },
        "src/rewards/Reward.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Reward {\n    function _reward(address _beneficiary, uint256 _amount) internal virtual;\n}\n"
        },
        "src/storage/BeneficiaryStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary BeneficiaryStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"beneficiary.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0xbb9095517aacf757092c3cba47e08bd12f912043ab684917bf8b786ef53a9400;\n\n    /// @custom:storage-location erc7201:beneficiary.vesting.plopmenz\n    struct Storage {\n        address beneficiary;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/storage/ERC20RewardStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nlibrary ERC20RewardStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"erc20.reward.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0xa25687f8fc2dc2a054247bc2f1b14dead2930a16ee048f0e45ca4763720c7900;\n\n    /// @custom:storage-location erc7201:erc20.reward.vesting.plopmenz\n    struct Storage {\n        IERC20 token;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/storage/LinearVestingStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary LinearVestingStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"linear.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0x7424e9331a1a664cd2534451a453e8af8c82aa8e57e61f926d03aeb673afb400;\n\n    /// @custom:storage-location erc7201:linear.vesting.plopmenz\n    struct Storage {\n        uint128 amount;\n        uint64 start;\n        uint64 duration;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/storage/ManagerStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary ManagerStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"manager.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    // bytes32 private constant SLOT = 0x9bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e100;\n\n    /// @custom:storage-location erc7201:manager.vesting.plopmenz\n    struct Storage {\n        address manager;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := 0x9bd030a8ec256b418d6e01e616d8d95dec1253c7a909acf175d34e47cb5e100\n        }\n    }\n}\n"
        },
        "src/storage/ReleasedStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary ReleasedStorage {\n    // keccak256(abi.encode(uint256(keccak256(\"released.vesting.plopmenz\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant SLOT = 0x8df55bf63e7e5c2484a7ac576946139c1fe207dc43b74382c8f112dfb519ec00;\n\n    /// @custom:storage-location erc7201:released.vesting.plopmenz\n    struct Storage {\n        uint256 released;\n    }\n\n    function getStorage() internal pure returns (Storage storage $) {\n        assembly {\n            $.slot := SLOT\n        }\n    }\n}\n"
        },
        "src/vesting/Beneficiary.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {BeneficiaryStorage} from \"../storage/BeneficiaryStorage.sol\";\n\nabstract contract Beneficiary {\n    event BeneficiaryCreated(address indexed beneficiary);\n\n    function __Beneficiary_init(address _beneficiary) internal {\n        emit BeneficiaryCreated(_beneficiary);\n        BeneficiaryStorage.Storage storage $ = BeneficiaryStorage.getStorage();\n        $.beneficiary = _beneficiary;\n    }\n\n    function beneficiary() public view virtual returns (address) {\n        BeneficiaryStorage.Storage storage $ = BeneficiaryStorage.getStorage();\n        return $.beneficiary;\n    }\n}\n"
        },
        "src/vesting/LinearVesting.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Vesting} from \"./Vesting.sol\";\n\nimport {LinearVestingStorage} from \"../storage/LinearVestingStorage.sol\";\n\nabstract contract LinearVesting is Vesting {\n    event LinearVestingCreated(uint128 amount, uint64 start, uint64 duration);\n\n    function __LinearVesting_init(uint128 _amount, uint64 _start, uint64 _duration) internal {\n        emit LinearVestingCreated(_amount, _start, _duration);\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        $.amount = _amount;\n        $.start = _start;\n        $.duration = _duration;\n    }\n\n    function amount() public view virtual returns (uint128) {\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        return $.amount;\n    }\n\n    function start() public view virtual returns (uint64) {\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        return $.start;\n    }\n\n    function duration() public view virtual returns (uint64) {\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        return $.duration;\n    }\n\n    // From Openzeppelin VestingWallet (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v5.0/contracts/finance/VestingWallet.sol)\n    function _vestingUnlocked() internal view override returns (uint256) {\n        if (block.timestamp < start()) {\n            return 0;\n        } else if (block.timestamp >= (start() + duration())) {\n            return amount();\n        } else {\n            return (amount() * (block.timestamp - start())) / duration();\n        }\n    }\n}\n"
        },
        "src/vesting/LinearVestingStoppable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Managed} from \"./Managed.sol\";\n\nimport {LinearVestingStorage} from \"../storage/LinearVestingStorage.sol\";\n\n/// @dev This does not burn or recover any tokens inside of the contract that might become unobtainable due to the earlier stop date!\nabstract contract LinearVestingStoppable is Managed {\n    error StopMustBeInTheFuture(uint64 stop, uint64 currentTime);\n    error StopMustDecreaseDuration(uint64 newDuration, uint64 oldDuration);\n\n    event Stop(uint64 newDuration);\n\n    function __LinearVestingStoppable_init() internal {}\n\n    function stop(uint64 newDuration) public virtual onlyManager {\n        LinearVestingStorage.Storage storage $ = LinearVestingStorage.getStorage();\n        if ($.start + newDuration < block.timestamp) {\n            revert StopMustBeInTheFuture($.start + newDuration, uint64(block.timestamp));\n        }\n        if (newDuration > $.duration) {\n            revert StopMustDecreaseDuration(newDuration, $.duration);\n        }\n\n        emit Stop(newDuration);\n        $.duration = newDuration;\n    }\n}\n"
        },
        "src/vesting/Managed.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Managed {\n    modifier onlyManager() virtual;\n}\n"
        },
        "src/vesting/Manager.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Managed} from \"./Managed.sol\";\n\nimport {ManagerStorage} from \"../storage/ManagerStorage.sol\";\n\nabstract contract Manager is Managed {\n    error SenderNotManager(address sender, address manager);\n\n    event ManagerCreated(address indexed manager);\n\n    function __Manager_init(address _manager) internal {\n        emit ManagerCreated(_manager);\n        ManagerStorage.Storage storage $ = ManagerStorage.getStorage();\n        $.manager = _manager;\n    }\n\n    function manager() public view virtual returns (address) {\n        ManagerStorage.Storage storage $ = ManagerStorage.getStorage();\n        return $.manager;\n    }\n\n    modifier onlyManager() virtual override {\n        if (msg.sender != manager()) {\n            revert SenderNotManager(msg.sender, manager());\n        }\n        _;\n    }\n}\n"
        },
        "src/vesting/Released.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Vesting} from \"./Vesting.sol\";\n\nimport {ReleasedStorage} from \"../storage/ReleasedStorage.sol\";\n\nabstract contract Released is Vesting {\n    function __Released_init() internal {}\n\n    function released() public view virtual returns (uint256) {\n        ReleasedStorage.Storage storage $ = ReleasedStorage.getStorage();\n        return $.released;\n    }\n\n    function releasable() public view virtual returns (uint256) {\n        return _vestingUnlocked() - released();\n    }\n\n    function _release(address _account) internal virtual {\n        uint256 releaseAmount = releasable();\n        ReleasedStorage.Storage storage $ = ReleasedStorage.getStorage();\n        $.released += releaseAmount;\n        _reward(_account, releaseAmount);\n    }\n}\n"
        },
        "src/vesting/Vesting.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Reward} from \"../rewards/Reward.sol\";\n\nabstract contract Vesting is Reward {\n    function _vestingUnlocked() internal view virtual returns (uint256);\n}\n"
        },
        "src/vesting/extensions/SingleBeneficiaryLinearVesting.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Released} from \"../Released.sol\";\nimport {Beneficiary} from \"../Beneficiary.sol\";\nimport {LinearVesting} from \"../LinearVesting.sol\";\n\nabstract contract SingleBeneficiaryLinearVesting is Released, Beneficiary, LinearVesting {\n    function __SingleBeneficiaryLinearVesting_init(\n        uint128 _amount,\n        uint64 _start,\n        uint64 _duration,\n        address _beneficiary\n    ) internal {\n        __Released_init();\n        __Beneficiary_init(_beneficiary);\n        __LinearVesting_init(_amount, _start, _duration);\n    }\n\n    function release() public virtual {\n        _release(beneficiary());\n    }\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "murky/=lib/murky/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/open-token/lib/vesting",
  "submitted": {
    "transactionHash": "0x1982839a29b9d680aaaefa7437f4717d58f5941e6df1cb8875734301f2b64d02",
    "date": "2024-07-05T13:56:03.453Z"
  }
}
